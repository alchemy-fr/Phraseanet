<div style="display: flex; flex-direction: column; justify-content: space-between; height:100%">
    <form method="post" action="{{ path('admin_users_search') }}" target="_self"
          style="visibility:hidden; display:none">
        <input type="text" name="ord" value=""/>
        <input type="text" name="srt" value=""/>
        <input type="text" name="act" value="?"/>
        <input type="text" name="p0" value=""/>
        <input type="text" name="p1" value=""/>
        <input type="text" name="p2" value="5"/>
        <input type="text" name="p3" value="?"/>
        <input type="submit">
    </form>

    <div class="page-header">
        <h1>{{ 'admin::sugval: Valeurs suggerees/Preferences de la collection' | trans }}
            "{{ app['request'].attributes.get('bas_id')|bas_labels(app) }}"</h1>
    </div>


    {% if app['request'].query.get('success') == '1' %}
    <div class="alert alert-success">
        <a class="close" data-dismiss="alert" href="#">×</a>
        {{ 'Successful update' | trans }}
    </div>
    {% elseif app['request'].query.get('success') == '0' %}
    <div class="alert alert-error">
        <a class="close" data-dismiss="alert" href="#">×</a>
        <strong>{{ 'An error occured' | trans }}</strong>
    </div>
    {% endif %}

    <div id="iddivloading"
         style="border:#ff0000 3px solid;position:absolute; width:94%;height:80%; top:95px; left:10px;z-index:99;text-align:center">
        <table style='width:100%;height:100%; text-align:center;vertical-align: middle; color:#FF0000; font-size:16px'>
            <tr>
                <td>
                    <div style='background-color:#FFFFFF'>
                        <b>{{ 'phraseanet::chargement' | trans }}</b>
                    </div>
                </td>
            </tr>
        </table>
    </div>

    <span id="spanref" style="position:absolute; bottom:0px; left:5px;  background-color:#0f00cc; visibility:hidden">
</span>

    <div id="divref">&nbsp;</div>

    <div id="presentUser" style="flex: 1; display: flex; flex-direction: column;">

        <div style="" class="tabbar">
            <a href="#" id="linkviewgraph" onClick="view('GRAPH');return(false);"
               class='btn btn-mini active'>{{ 'boutton::vue graphique' | trans }}</a>
            <a href="#" id="linkviewxml" onClick="view('XML');return(false);"
               class='btn btn-mini'>{{ 'boutton::vue xml' | trans }}</a>
        </div>

        <div style="background-color:#c9c9c9; border:#cccccc 1px solid; display: flex; flex:1;">

            <div id="divGraph"
                 style="background-color:#c9c9c9; border:none; display: flex; flex-direction: column; width:100%;">

                <div style="display: flex; flex-direction: row; align-items: flex-start;">

                    <label for="nomchamPH">{{ 'admin::sugval: champs' | trans }}</label>
                    <select name="usrbases" id="nomchamPH"
                            onKeyUp="javascript:write_valsug();"
                            onChange="javascript:savenomaff();makeRestrict();maketextaffich();makeEmpty();write_valsug();"
                            onclick="makeRestrict();desactivall4VS(); write_valsug();">
                        {% for field in databox.get_meta_structure() %}
                        {% if not field.is_readonly %}
                        <option value='{{ field.get_name() }}'> {{ field.get_label(app['locale']) }} </option>
                        {% endif %}
                        {% endfor %}
                    </select>
                    &nbsp;&nbsp;
                    <input type="text" id="valajout" onKeyUp="verifAndactiv();" onclick="desactivall4VS();" style="">
                    <input class='btn' type="submit" value="{{ 'boutton::ajouter' | trans }}" disabled style=""
                           onclick="ajouter();" id="bout_add" name="bout_add">
                </div>

                <div class="btn-group" style="display: flex; flex-direction: row; align-items: flex-start;">
                    <span style="flex:1"></span>
                    <input class='btn' type="submit" value="{{ 'admin::base:collorder: monter' | trans }}" disabled
                           onclick="modifordre(true);" id="bout_mont" name="bout_mont">
                    <input class='btn' type="submit" value="{{ 'admin::base:collorder: descendre' | trans }}" disabled
                           onclick="modifordre(false);" id="bout_desc" name="bout_desc">
                    <input class='btn' type="submit" value="{{ 'boutton::supprimer' | trans }}" disabled
                           onclick="supprimer();" ondblclick="supprimer();" id="bout_supp"
                           name="bout_supp">
                    <input class='btn' type="submit"
                           value="{{ 'admin::base:collorder: reinitialiser en ordre alphabetique' | trans }}"
                           onclick="trialph();" ondblclick="trialph();" id="bout_trialph"
                           name="bout_trialph">
                </div>

                <div id="valsug" style="flex: 1;">
                    <select size="12" name=valsug2 id="valsug2" onFocus="activ4VS();" onClick="desactiver();activ4VS();"
                            onChange="desactiv4VS();" style="width:100%; height:100%;"></select>
                </div>

            </div>

            <div id="divXml" style="display:none">
                <textarea cols="500" wrap="soft" id="txtareaxml" onchange="chgXml();"
                          style="white-space:pre; width:100%">{{ collection.get_prefs() | raw }}</textarea>
            </div>

        </div>

        <div style="height:30px; text-align: center;">
            <b><a class='btn' href="#" onclick="valid();return false;" id="genevalid"
                  style="color:#000000; text-decoration:none">{{ 'boutton::valider' | trans }}</a></b>
        </div>
    </div>

    <form method="post" name="chgStructure"
          action="{{ path('admin_collection_display_suggested_values', { 'bas_id' : app['request'].attributes.get('bas_id') }) }}"
          onsubmit="return false;"
          target="right"
          style="position:absolute; visibility:hidden; height: 0px; padding: 0px; margin: 0px;">
        <textarea style="visibility:hidden;white-space:pre" name="str"
                  id="idstr">{{ collection.get_prefs() | raw }}</textarea>
    </form>

</div>

<style>
    .tabbar A::before {
        content: " ";
    }
    .tabbar A.active::before {
        content: "✓";
    }
</style>
<script type="text/javascript">

    let total       = 0;
    let statuscoll  = "";
    let changeInXml = false;
    let avantModif  = "";
    let pref     = new Array(0);
    let lastpref = null;

    function chgXml() {
        if (avantModif != $("#txtareaxml").val()) {
            changeInXml = true;
        }
    }

    function valeursPref(nomaff) {
        this.nomaff  = nomaff;
        this.Type    = "text";
        this.content = "none";
        this.empty   = true;
        this.valsug  = new Array(0);

        return this;
    }

    function savenomaff() {
        const o = $("#namAff");

        if (o.length > 0 && lastpref != null) {
            pref[lastpref].nomaff = o.val();
        }
    }

    // ecrit le select des valsug
    function write_valsug() {
        const o = $("#nomchamPH");

        if (o.length > 0) {
            const o2 = $("#valsug");

            if (o2.length > 0) {
                lastpref = o.val();

                const p = document.getElementById("valsug2");

                p.options.length = 0;

                for (let i = 0; i < pref[o.val()].valsug.length; i++) {
                    if (pref[o.val()].valsug[i]) {
                        p.options[p.options.length] = new Option((pref[o.val()].valsug[i]), pref[o.val()].valsug[i]);
                    }
                }
            }
        }
    }

    function desactivall4VS() {
        activer_bout('bout_supp', false);
        activer_bout('bout_mont', false);
        activer_bout('bout_desc', false);

        const o2 = $("#valsug2");

        if (o2.length > 0) {
            o2.prop("selectedIndex", -1);
        }
    }


    function desactiv4VS() {
        const o2 = $("#valsug2");

        if (o2.length > 0) {
            const optionLength = o2.find("option").length;
            const index        = o2.prop("selectedIndex");

            if (optionLength > 1 && index != -1) {
                if ((index + 1) == optionLength) {
                    activer_bout('bout_desc', false);
                }
                else {
                    activer_bout('bout_desc', true);
                }

                if (index == 0 && optionLength > 1) {
                    activer_bout('bout_mont', false);
                }
                else {
                    activer_bout('bout_mont', true);
                }
            }
            else {
                activer_bout('bout_desc', false);
                activer_bout('bout_mont', false);
            }

        }
    }

    function activ4VS() {
        const o2 = $("#valsug2");

        if (o2.length > 0 && o2.prop("selectedIndex") == -1) {
            return;
        }

        desactiv4VS();
        activer_bout('bout_supp', true);
    }

    // supprime une valsug
    function supprimer() {

        let lastIdx = null;
        const o2    = $("#valsug2");

        if (o2.length > 0) {
            const o           = $("#nomchamPH");
            let ancienfocus = o2.prop("selectedIndex");
            // pref[o.value].valsug.splice(o2.selectedIndex,1);
            let bb          = 0;
            lastIdx         = (pref[o.val()].valsug.length) - 1;
            for (let aa in pref[o.val()].valsug) {
                if (aa != o2.prop("selectedIndex")) {
                    pref[o.val()].valsug[bb] = pref[o.val()].valsug[aa];
                    if (parseInt(aa) + 1 == pref[o.val()].valsug.length) {
                        pref[o.val()].valsug[bb] = null;
                    }
                    bb++;
                }
            }

            pref[o.val()].valsug[bb] = "";

            if (lastIdx != null && lastIdx >= 0) {
                delete (pref[o.val()].valsug[lastIdx]);
                pref[o.val()].valsug.length--;
            }


            write_valsug();
            const o2 = $("#valsug2");

            let i = o2.find("options").length;  // au depart i=1 et ancienfocus=1
            o2.prop("selectedIndex", -1);

            while (i > -1) {
                if (o2.find("options").length >= ancienfocus + 1) {
                    o2.prop("selectedIndex", ancienfocus);
                    i == 0;
                }
                else {
                    ancienfocus--;
                }

                i--;
            }

            if (o2.prop("selectedIndex") < 0) {
                activer_bout('bout_supp', false);
            }

            desactiv4VS();
        }
    }

    // ajoute une valsug
    function ajouter() {
        const o2       = $("#valajout");
        const newVal = o2.val().trim();

        if (newVal === "") {
            o2.val("");
            verifAndactiv();
            o2.focus();
        }
        else {
            const o = $("#nomchamPH");
            pref[o.val()].valsug[pref[o.val()].valsug.length] = newVal;
            o2.val("");

            write_valsug();

            const o3 = $("#valsug2");
            if (o3.length > 0) {
                o3.prop("selectedIndex", o3.find("options").length - 1);
                activer_bout('bout_add', true);
                activ4VS();
                desactiv4VS();
            }
        }
    }

    function verifAndactiv() {
        const o = $("#valajout");
        if (o.length > 0) {
            if (o.val().trim() !== "") {
                activer_bout('bout_add', true);
            }
            else {
                activer_bout('bout_add', false);
            }
        }
    }

    function desactiver() {
        const o = $("#valajout");
        // desactivation du bouton ajouter
        if (o.length > 0) {
            o.val("");
            activer_bout("bout_add", true);
        }
    }

    function valid() {
        savenomaff();
        let lexmlstruct = '';

        if ($('#divGraph').length > 0 && $('#divGraph').is(':visible')) {
            lexmlstruct = getSruct();
        }
        else if ($('#divXml').length > 0 && $('#divXml').is(':visible')) {
            lexmlstruct = $('#txtareaxml').val();
        }

        if ($("#idstr").length > 0) {
            $("#idstr").val(lexmlstruct);

            const form = $("form[name=chgStructure]");

            $.ajax({
                dataType: 'json',
                type:     form.attr('method'),
                url:      form.attr('action'),
                data:     form.serializeArray(),
                success:  function (data) {
                    if (data.success) {
                        $('#tree li.selected a').trigger('click');
                    }
                    else {
                        $(".page-header").after(
                            '<div class="alert alert-error">'
                            + '<button class="close" data-dismiss="alert">×</button>'
                            + data.msg
                            + '</div>');
                    }
                }
            });
        }
    }

    function modifordre(bool) {
        let o2 = $("#valsug2");
        const o = $("#nomchamPH");
        //bool : true pour monter  -- false pour descendre
        if (o2.length > 0 && o.length > 0) {
            let ancienind = o2.prop('selectedIndex');
            let tmp       = pref[o.val()].valsug[o2.prop('selectedIndex')];

            if (bool) {
                pref[o.val()].valsug[o2.prop('selectedIndex')]     = pref[o.val()].valsug[o2.prop('selectedIndex') - 1];
                pref[o.val()].valsug[o2.prop('selectedIndex') - 1] = tmp;
                ancienind--;
            }
            else {
                pref[o.val()].valsug[o2.prop('selectedIndex')]     = pref[o.val()].valsug[o2.prop('selectedIndex') + 1];
                pref[o.val()].valsug[o2.prop('selectedIndex') + 1] = tmp;
                ancienind++;
            }

            write_valsug();
            o2 = $("#valsug2");
            o2.prop('selectedIndex', ancienind);
            desactiv4VS();
        }
    }

    function trialph() {
        const o2 = $("#valsug2");
        const o = $("#nomchamPH");

        if (o2.length > 0 && o.length > 0) {
            pref[o.val()].valsug.sort();
            write_valsug();
            desactiv4VS();
            desactivall4VS()
        }
    }

    function maketextaffich() {
        return false;
    }

    function makeRestrict() {
        const o = $("#nomchamPH");

        if (o.length > 0) {
            let tmp = "none";

            if (pref[o.val()].content != null) {
                tmp = pref[o.val()].content;
            }

            const o3 = $("#" + tmp);

            if (o3.length > 0) {
                o3.attr("checked", true);
            }
        }
    }

    function makeEmpty() {
        const o = $("#nomchamPH");

        if (o.length > 0) {
            let tmp = "empty";
            if (!pref[o.val()].empty) {
                tmp = "no" + tmp;
            }

            const o3 = $("#" + tmp);

            if (o3.length > 0) {
                o3.attr("checked", true);
            }
        }
    }

    function chgEmpty(bool) {
        const o = $("#nomchamPH");

        if (o.length > 0) {
            pref[o.val()].empty = bool;
        }
    }

    function chgType(type) {
        const o = $("#nomchamPH");

        if (o.length > 0) {
            pref[o.val()].Type = type;
        }
    }

    function chgrestrict(nomRestrict) {
        const o = $("#nomchamPH");

        if (o.length > 0) {
            pref[o.val()].content = nomRestrict;
        }
    }

    function activer_bout(idBout, val) {
        const o = $("#" + idBout);

        if (o.length > 0) {
            if (!val) {
                o.prop('disabled', true);
            }
            else {
                o.prop('disabled', false);
            }
        }
    }

    otherFields = "";


    {% for name, meta in structFields %}
    pref["{{ name }}"]         = new valeursPref("{{ name }}");
    pref["{{ name }}"].nomaff  = "{{ name }}>";
    pref["{{ name }}"].Type    = "text";
    pref["{{ name }}"].content = "none";
    pref["{{ name }}"].empty   = true;
    {% endfor %}


    {% for value in suggestedValues %}
    pref["{{ value['key']|escapeDoubleQuote|raw }}"].valsug["{{ value['value']|escapeDoubleQuote|raw }}"] = ('{{ value['name']|escapeSimpleQuote|raw }}');
    {% endfor %}


    {% for pref in basePrefs %}
    {% if pref['status'] is not none %}
    statuscoll = "<status>{{ pref['status'] }}</status>";
    {% elseif pref['xml'] is not none %}
    otherFields += "{{ pref['xml'] | e('js') }}";
    {% endif %}
    {% endfor %}

    function getSruct() {
        const parser = new DOMParser();
        const dom    = parser.parseFromString($('#txtareaxml').val(), 'text/xml');

        let svDeleted = false;
        while (true) {
            const svs = dom.getElementsByTagName('sugestedValues');
            if (svs.length === 0) {
                break;
            }
            const sv     = svs[0];
            const indent = sv.previousSibling;
            if (indent && indent.nodeType === dom.TEXT_NODE && indent.textContent.trim() === "") {
                indent.parentNode.removeChild(indent);
            }
            const eol = sv.nextSibling;
            if (eol && eol.nodeType === dom.TEXT_NODE && eol.textContent.trim() === "") {
                eol.parentNode.removeChild(eol);
            }
            sv.parentNode.removeChild(sv);
            svDeleted = true;
        }

        const sv = dom.createElement('sugestedValues');

        for (const a in pref) {
            const section = dom.createElement(a);
            let go        = false;
            for (const b in pref[a].valsug) {
                if (pref[a].valsug[b] !== "") {
                    go          = true;
                    const value = dom.createElement('value');
                    value.appendChild(dom.createTextNode(pref[a].valsug[b]));
                    section.appendChild(dom.createTextNode("\n\t\t\t"));
                    section.appendChild(value);
                }
            }
            if (go) {
                sv.appendChild(dom.createTextNode("\n\t\t"));
                section.appendChild(dom.createTextNode("\n\t\t"));
                sv.appendChild(section);
            }
        }
        sv.appendChild(dom.createTextNode("\n\t"));
        const bp = dom.getElementsByTagName('baseprefs')[0];
        if (svDeleted) {
            bp.appendChild(dom.createTextNode("\n"));
        }
        bp.appendChild(dom.createTextNode("\t"));
        bp.appendChild(sv);
        bp.appendChild(dom.createTextNode("\n"));

        const serializer = new XMLSerializer();
        let xml          = serializer.serializeToString(dom).replace("<baseprefs>", "\n<baseprefs>");

        if (xml.substring(0, 8) !== '<?xml ve') {
            xml = '<?xml version="1.0" encoding="UTF-8"?>' + xml;
        }

        return xml;
    }

    function view(type) {
        $(".tabbar A").removeClass("active");
        switch (type) {
            case 'XML':
                $('#divGraph').css("display", "none");
                $('#divXml').css("display", "flex");

                $('#linkviewxml').addClass("active");

                newStr = getSruct();

                if ($('#txtareaxml').length > 0 && newStr != null) {
                    avantModif = newStr;
                    $('#txtareaxml').val(newStr);
                }
                break;

            case 'GRAPH':
                if (!changeInXml || confirm("{{ 'admin::sugval: Attention, passer en mode graphique implique la perte des modifications du xml si vous n\'appliquez pas les changements avant.' |trans | e('js') }}\n{{ 'Continuer quand meme' |trans | e('js') }}")) {
                    $('#divXml').css("display", "none");
                    $('#divGraph').css("display", "flex");

                    $('#linkviewgraph').addClass("active");
                }
                break;
        }
    }

    $(document).ready(function () {
        write_valsug();
        makeRestrict();
        maketextaffich();
        makeEmpty();
        $("#iddivloading").hide();
    });

</script>
