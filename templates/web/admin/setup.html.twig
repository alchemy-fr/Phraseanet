<div class="page-header">
    <h1>{{ 'Setup' | trans }}</h1>
</div>

<form class="form-horizontal" id="GV_form_head">
    <div class="control-group">
        <label class="control-label">Adress : </label>
        <div class="controls">
            <input type="text" class="input-xxlarge" readonly="readonly" value="{{ app['conf'].get('servername') }}" />
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">Installation : </label>
        <div class="controls">
            <input type="text" class="input-xxlarge" readonly="readonly" value="{{ app['root.path'] }}" />
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">Maintenance : </label>
        <div class="controls">
            <input type="checkbox" readonly="readonly" disabled="disabled"/>
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">Debug : </label>
        <div class="controls">
            <input type="checkbox" readonly="readonly" disabled="disabled" {{ app['debug'] ? "checked='checked'" : '' }} />
        </div>
    </div>
</form>

{{ form_start(form, {'method': 'POST', 'action' : path('setup_display_globals'), 'attr': {'autocomplete' : 'off', 'class' : 'form-horizontal'}}) }}
{{ form_errors(form) }}
{% for daform in form %}
    {% if daform.vars['label'] != null %}
        <fieldset>
            <legend>{{ daform.vars['label'] }}</legend>
            {% for formdata in daform %}
                <div class="control-group">
                    {{ form_errors(formdata) }}
                    {{ form_label(formdata, null, { 'label_attr': {'class' : 'control-label'} } ) }}
                    <div class="controls">
                        {{ form_widget(formdata, {'attr': {'class': 'input-xxlarge'}}) }}
                    </div>

                    <div>{{ formdata.vars['help_message'] }}</div>
                    {{ form_rest(formdata) }}
                </div>
            {% endfor %}
            {{ form_rest(daform) }}
        </fieldset>
    {% endif %}
{%  endfor %}
<legend>{{ "setup::custom-link:title-custom-link" | trans }}</legend>
<table id="custom-link-table">
</table>
<button id="add-row" class="btn btn-success">{{ "setup::custom-link:add-link" | trans }}</button>
<div style="clear: both;"></div>
<div class="well well-large">
    <div style="max-width: 400px;margin: 0 auto 10px;">
        <input type="submit" class="btn btn-primary btn-block btn-large" value="{{ 'boutton::valider' | trans }}"/>
    </div>
</div>
{{ form_end(form) }}

<script type="text/javascript" src="/assets/vendors/jquery-simplecolorpicker/jquery.simplecolorpicker.js"></script>
<script type='text/javascript'>
    {% autoescape false %}
    $(document).ready(function() {
        // use html5 fallback validation if browser do not support required attribute
        var form = $("#GV_form");
        var inputs = form.find("input, select, textarea");

        var languageOptionArray = [
            {"value": "", "text": "{{ "setup::custom-link:select-language" | trans }}"},
            {"value": "all", "text": "{{ "All" | trans }}"},
            {"value": "fr", "text": "FR"},
            {"value": "en", "text": "EN"},
            {"value": "es", "text": "ES"},
            {"value": "ar", "text": "AR"},
            {"value": "de", "text": "DE"},
            {"value": "du", "text": "DU"}
        ];

        var locationOptionArray = [
            {"value": "", "text": "{{ "setup::custom-link:location" | trans }}"},
            {"value": "help-menu", "text": "{{ "setup::custom-link:help-menu" | trans }}"},
            {"value": "navigation-bar", "text": "{{ "setup::custom-link:navigation-bar" | trans }}"}
        ];

        var colorOptionArray = [
            {"value": "", "text": ""},
            {"value": "#ad0800", "text": "#ad0800"},
            {"value": "#f06006", "text": "#f06006"},
            {"value": "#f5842b", "text": "#f5842b"},
            {"value": "#ffc322", "text": "#ffc322"},
            {"value": "#f4ea5b", "text": "#f4ea5b"},
            {"value": "#b8d84e", "text": "#b8d84e"},
            {"value": "#5aa53b", "text": "#5aa53b"},
            {"value": "#a1d0d0", "text": "#a1d0d0"},
            {"value": "#4497d5", "text": "#4497d5"},
            {"value": "#3567c6", "text": "#3567c6"},
            {"value": "#b151ee", "text": "#b151ee"},
            {"value": "#c875ea", "text": "#c875ea"},
            {"value": "#e46990", "text": "#e46990"},
            {"value": "#ffccd7", "text": "#ffccd7"}
        ];

        var header = '<thead>' +
            '<th>{{ "setup::custom-link:name-link" | trans }}</th>' +
            '<th>{{ "setup::custom-link:language-link" | trans }}</th>' +
            '<th>{{ "setup::custom-link:link-url" | trans }}</th>' +
            '<th>{{ "setup::custom-link:location-link" | trans }}</th>' +
            '<th>{{ "setup::custom-link:order-link" | trans }}</th>' +
            '<th></th>' +
            '<th></th>' +
            '<th></th>' +
            '</thead>';

        // if required not supported, emulate it
        if (!Modernizr.input.required) {
            form.bind("submit", function (event) {
                var required = [];
                // loop through input elements looking for required
                $.each(inputs, function(k, input){
                    var input = $(input);
                    if (typeof input.attr('required') !== "undefined") {
                        // if the value is empty, add to required array
                        if (input.val().replace(/^\s+|\s+$/g, '') === '') {
                            required.push(input.attr('name'));
                        }
                    }
                });

                // show popover if required array contains any elements
                if (required.length > 0) {
                    $.each(required, function(k, name) {
                        var $this = $("input[name="+name+"], select[name="+name+"], textarea[name="+name+"]");
                        $this.popover({ title: language.attention, content: language.requiredValue, placement:"bottom" })
                                .blur(function () {
                                    $this.popover('hide');
                                });
                        $this.popover("show");
                    });
                    // prevent the form from being submitted
                    event.stopImmediatePropagation();
                    return false;
                }
            });
        }

        $("#add-row").click(function () {
            //check if first row, then add header and body
            var rowCount = $('#custom-link-table tr').length;
            if (rowCount < 1) {

                $("#custom-link-table").append(header);
                $("#custom-link-table").append('<tbody></tbody>');
            }

            addRow();
            return false;
        });
        $("#custom-link-table").on('click', '.close-row', function () {
            $(this).closest('tr').remove();
            var rowCount = $('#custom-link-table tr').length;
            //remove header if no more rows
            if (rowCount <= 1) {
                $("#custom-link-table").empty();
            }
            return false;
        });

        $("#custom-link-table").on('change', 'select[name="link-color"]', function () {
            var element = $(this).parent().siblings(':first').find("input");
            updateSelectColor($(this).siblings(), $(this).val());
            updateInputNameColor(element, $(this).val());
        });

        $('form').on('submit', function () {
            // do validation for custom link
            var customLinks = [];

            $('#custom-link-table tbody tr').each(function (i, row) {
                var rowData = getDataOfRow(row);
                customLinks.push(rowData);
            });

            $('#custom-links').val(JSON.stringify(customLinks));
        });

        function addRow(rowData) {
            //custom link
            var inputName = '<input type="text" value="' + (rowData ? rowData.linkName.replace(/"/g, '&quot;') : "")
                + '" placeholder="' + '{{ "setup::custom-link:name-link" | trans }}'
                + '" name="link-name" style="' + getInputNameStyle(rowData) + '" maxlength="30" required>';
            var inputURL = '<input type="url" value="' + (rowData ? rowData.linkUrl : "") + '" placeholder="' + '{{ "setup::custom-link:placeholder-link-url" | trans }}' + '" name="link-url" required>';
            var inputLanguage = generateSelectInput("link-language", languageOptionArray, (rowData ? rowData.linkLanguage : ""));
            var inputLocation = generateSelectInput("link-location", locationOptionArray, (rowData ? rowData.linkLocation : ""));
            var inputOrder = '<input type="number" min="1" name="link-order" value="' + (rowData ? rowData.linkOrder : "") + '">';
            var inputColor = generateSelectInput("link-color", colorOptionArray, (rowData ? rowData.linkColor : ""));
            var inputBold = '<input type="checkbox" class="link_check_box" name="link-bold" value="' + (rowData ? rowData.linkBold : "") + '" onchange="$(this).val(this.checked? true: false);" ' + (rowData && rowData.linkBold == "true" ? "checked" : "") + ' /><label for="link-bold"></label> ';
            var closeButton = '<button class="btn btn-default close-row">' +
                '<span class="ui-button-icon-primary ui-icon ui-icon-closethick"></span></button>';

            var rowForCustomLink = '<tr>' +
                '<td>' + inputName + '</td>' +
                '<td>' + inputLanguage + '</td>' +
                '<td>' + inputURL + '</td>' +
                '<td>' + inputLocation + '</td>' +
                '<td>' + inputOrder + '</td>' +
                '<td>' + inputBold + '</td>' +
                '<td>' + inputColor + '</td>' +
                '<td>' + closeButton + '</td></tr>';

            $("#custom-link-table").append(rowForCustomLink);

            $('select[name="link-color"]').simplecolorpicker({picker: true});

            _.each($('select[name="link-color"]'), function (element) {
                updateSelectColor($(element).siblings(), $(element).val());
                updateInputNameColor($(element).parent().siblings(':first').find("input"), $(element).val());
            });
        }

        function getInputNameStyle(rowData) {
            if (rowData) {
                if (rowData.linkColor === "") {
                    return "background-color:" + rowData.linkColor + ";color:#555;";
                } else {
                    return "background-color:" + rowData.linkColor + ";color:#FFFFFF;";
                }
            } else {
                return "";
            }
        }

        function generateSelectInput(inputName, optionArray, selectedValue) {
            var html = $("<select></select>").attr("name", inputName);
            _.each(optionArray, function (option) {
                html.append($('<option>', {
                    value: option.value,
                    text: option.text
                }).attr('selected', (selectedValue == option.value)));
            });
            return html[0].outerHTML;
        }

        function getDataOfRow(row) {
            var row = $(row);

            var linkObject = {};
            linkObject.linkName = row.find($('input[name="link-name"]')).val();
            linkObject.linkLanguage = row.find($('select[name="link-language"]')).val();
            linkObject.linkUrl = row.find($('input[name="link-url"]')).val();
            linkObject.linkLocation = row.find($('select[name="link-location"]')).val();
            linkObject.linkOrder = row.find($('input[name="link-order"]')).val() || 1;
            linkObject.linkColor = row.find($('select[name="link-color"]')).val() || "";
            linkObject.linkBold = row.find($('input[name="link-bold"]')).val() || "false";

            return linkObject;
        }


        //create custom link table if data exist
        var customLinksData = JSON.parse($('#custom-links').val() || '[]');
        if (customLinksData.length > 0) {
            var rowCount = $('#custom-link-table tr').length;
            if (rowCount < 1) {

                $("#custom-link-table").append(header);
                $("#custom-link-table").append('<tbody></tbody>');
            }

            _.each(customLinksData, function (linkData) {
                addRow(linkData);
            });

        }

        function updateSelectColor(element, color) {
            element.css("border", "none");
            if (color === "") {
                element.css("background", "url(/assets/common/images/icons/Bouton-couleur.png)");
            } else {
                element.css("background", color);
            }
        }

        function updateInputNameColor(element, color) {
            element.css("background-color", color);
            if (color === "") {
                element.css("color", "#555");
            } else {
                element.css("color", "#FFFFFF");
            }
        }
    });
    {% endautoescape %}
</script>
