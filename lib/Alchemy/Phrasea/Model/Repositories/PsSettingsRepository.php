<?php

namespace Alchemy\Phrasea\Model\Repositories;

use Alchemy\Phrasea\Model\Entities\PsSettings;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\OptimisticLockException;

/**
 * PsSettingsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PsSettingsRepository extends EntityRepository
{
    public function exists(string $role=null, string $name=null, PsSettings $parent=null, array $values = []): bool
    {
        return count($this->get($role, $name, $parent, $values, 1)) > 0;
    }

    /**
     * get rows that match every non-null arguments
     * consequence : this can't be used to search a null...
     *
     * @param string|null $role
     * @param string|null $name
     * @param PsSettings|null $parent
     * @param array $values         k=>v, where k = "valueText" | "valueInt" | "valueVarchar"
     * @param int|null $maxResult
     * @return array
     */
    public function get(string $role=null, string $name=null, PsSettings $parent=null, array $values = [], int $maxResult=null)
    {
        $qb = $this->createQueryBuilder('s');
        if(!is_null($role)) {
            $qb->andWhere('s.role = :role');
            $qb->setParameter('role', $role);
        }
        if(!is_null($name)) {
            $qb->andWhere('s.name = :name');
            $qb->setParameter('name', $name);
        }
        if(!is_null($parent)) {
            $qb->andWhere('s.parent = :parent');
            $qb->setParameter('parent', $parent);
        }
        foreach($values as $k => $v) {
            $qb->andWhere('s.'.$k.' = :'.$k);
            $qb->setParameter($k, $v);
        }
        if(!is_null($maxResult)) {
            $qb->setMaxResults(1);
        }

        return $qb->getQuery()->getResult();
    }


    /**
     * find a unique row, creating it if it did not exist
     *
     * @param string|null $role
     * @param string|null $name
     * @param PsSettings|null $parent
     * @param array $values
     * @return PsSettings
     * @throws NonUniqueResultException
     * @throws OptimisticLockException
     * @throws \Doctrine\DBAL\ConnectionException
     */
    public function getOrCreateUnique(string $role=null, string $name=null, PsSettings $parent=null, array $values = [])
    {
        $this->_em->beginTransaction();
        $r = $this->get($role, $name, $parent, $values);
        if(count($r) === 0) {
            $e = [$this->insert($role, $name, $parent, $values)];
        }
        $this->_em->getConnection()->commit();

        if(count($e) !== 1) {
            throw new NonUniqueResultException();
        }
        return $e[0];
    }

    /**
     * create a new row which must not exist before
     *
     * @param string|null $role
     * @param string|null $name
     * @param PsSettings|null $parent
     * @param array $values
     * @return PsSettings
     * @throws NonUniqueResultException
     * @throws OptimisticLockException
     * @throws \Doctrine\DBAL\ConnectionException
     */
    public function createUnique(string $role=null, string $name=null, PsSettings $parent=null, array $values = [])
    {
        $this->_em->beginTransaction();

        if(!$this->exists($role, $name, $parent, $values)) {
            $e = $this->insert($role, $name, $parent, $values);

            $this->_em->getConnection()->commit();

            return $e;
        }
        else {
            // already exist
            throw new NonUniqueResultException();
        }
    }

    public function getEntityManager()
    {
        return $this->_em;
    }

    /**
     * insert a row, NO TRANSACTION
     * @param string|null $role
     * @param string|null $name
     * @param PsSettings|null $parent
     * @param array $values
     * @return PsSettings
     * @throws OptimisticLockException
     */
    private function insert(string $role=null, string $name=null, PsSettings $parent=null, array $values = [])
    {
        $e = new PsSettings();

        if(!is_null($parent)) {
            $e->setParent($parent);
        }
        if(!is_null($role)) {
            $e->setRole($role);
        }
        if(!is_null($name)) {
            $e->setName($name);
        }
        foreach ($values as $k => $v) {
            switch ($k) {
                case 'valueText':
                    $e->setValueText($v);
                    break;
                case 'valueInt':
                    $e->setValueInt($v);
                    break;
                case 'valueVarchar':
                    $e->setValueVarchar($v);
                    break;
            }
        }

        $this->_em->persist($e);
        $this->_em->flush();

        return $e;
    }
}
