<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class FeedItem extends \Entities\FeedItem implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setRecordId($recordId)
    {
        $this->__load();
        return parent::setRecordId($recordId);
    }

    public function getRecordId()
    {
        $this->__load();
        return parent::getRecordId();
    }

    public function setSbasId($sbasId)
    {
        $this->__load();
        return parent::setSbasId($sbasId);
    }

    public function getSbasId()
    {
        $this->__load();
        return parent::getSbasId();
    }

    public function setEntry(\Entities\FeedEntry $entry = NULL)
    {
        $this->__load();
        return parent::setEntry($entry);
    }

    public function getEntry()
    {
        $this->__load();
        return parent::getEntry();
    }

    public function setOrd($ord)
    {
        $this->__load();
        return parent::setOrd($ord);
    }

    public function getOrd()
    {
        $this->__load();
        return parent::getOrd();
    }

    public function setCreatedOn($createdOn)
    {
        $this->__load();
        return parent::setCreatedOn($createdOn);
    }

    public function getCreatedOn()
    {
        $this->__load();
        return parent::getCreatedOn();
    }

    public function setUpdatedOn($updatedOn)
    {
        $this->__load();
        return parent::setUpdatedOn($updatedOn);
    }

    public function getUpdatedOn()
    {
        $this->__load();
        return parent::getUpdatedOn();
    }

    public function setLastInFeedItem()
    {
        $this->__load();
        return parent::setLastInFeedItem();
    }

    public function getRecord(\Alchemy\Phrasea\Application $app)
    {
        $this->__load();
        return parent::getRecord($app);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'recordId', 'sbasId', 'ord', 'createdOn', 'updatedOn', 'entry');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}