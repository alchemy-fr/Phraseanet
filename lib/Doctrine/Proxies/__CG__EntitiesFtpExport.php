<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class FtpExport extends \Entities\FtpExport implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setCrash($crash)
    {
        $this->__load();
        return parent::setCrash($crash);
    }

    public function getCrash()
    {
        $this->__load();
        return parent::getCrash();
    }

    public function incrementCrash()
    {
        $this->__load();
        return parent::incrementCrash();
    }

    public function setNbretry($nbretry)
    {
        $this->__load();
        return parent::setNbretry($nbretry);
    }

    public function getNbretry()
    {
        $this->__load();
        return parent::getNbretry();
    }

    public function setMail($mail)
    {
        $this->__load();
        return parent::setMail($mail);
    }

    public function getMail()
    {
        $this->__load();
        return parent::getMail();
    }

    public function setAddr($addr)
    {
        $this->__load();
        return parent::setAddr($addr);
    }

    public function getAddr()
    {
        $this->__load();
        return parent::getAddr();
    }

    public function setSsl($ssl)
    {
        $this->__load();
        return parent::setSsl($ssl);
    }

    public function isSsl()
    {
        $this->__load();
        return parent::isSsl();
    }

    public function setLogin($login)
    {
        $this->__load();
        return parent::setLogin($login);
    }

    public function getLogin()
    {
        $this->__load();
        return parent::getLogin();
    }

    public function setPwd($pwd)
    {
        $this->__load();
        return parent::setPwd($pwd);
    }

    public function getPwd()
    {
        $this->__load();
        return parent::getPwd();
    }

    public function setPassif($passif)
    {
        $this->__load();
        return parent::setPassif($passif);
    }

    public function isPassif()
    {
        $this->__load();
        return parent::isPassif();
    }

    public function setDestfolder($destfolder)
    {
        $this->__load();
        return parent::setDestfolder($destfolder);
    }

    public function getDestfolder()
    {
        $this->__load();
        return parent::getDestfolder();
    }

    public function setSendermail($sendermail)
    {
        $this->__load();
        return parent::setSendermail($sendermail);
    }

    public function getSendermail()
    {
        $this->__load();
        return parent::getSendermail();
    }

    public function setTextMailSender($textMailSender)
    {
        $this->__load();
        return parent::setTextMailSender($textMailSender);
    }

    public function getTextMailSender()
    {
        $this->__load();
        return parent::getTextMailSender();
    }

    public function setTextMailReceiver($textMailReceiver)
    {
        $this->__load();
        return parent::setTextMailReceiver($textMailReceiver);
    }

    public function getTextMailReceiver()
    {
        $this->__load();
        return parent::getTextMailReceiver();
    }

    public function setUsrId($usrId)
    {
        $this->__load();
        return parent::setUsrId($usrId);
    }

    public function getUsrId()
    {
        $this->__load();
        return parent::getUsrId();
    }

    public function getUser(\Alchemy\Phrasea\Application $app)
    {
        $this->__load();
        return parent::getUser($app);
    }

    public function setUser(\User_Adapter $user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function setFoldertocreate($foldertocreate)
    {
        $this->__load();
        return parent::setFoldertocreate($foldertocreate);
    }

    public function getFoldertocreate()
    {
        $this->__load();
        return parent::getFoldertocreate();
    }

    public function setLogfile($logfile)
    {
        $this->__load();
        return parent::setLogfile($logfile);
    }

    public function isLogfile()
    {
        $this->__load();
        return parent::isLogfile();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function setUpdated($updated)
    {
        $this->__load();
        return parent::setUpdated($updated);
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function addElement(\Entities\FtpExportElement $elements)
    {
        $this->__load();
        return parent::addElement($elements);
    }

    public function removeElement(\Entities\FtpExportElement $elements)
    {
        $this->__load();
        return parent::removeElement($elements);
    }

    public function getElements()
    {
        $this->__load();
        return parent::getElements();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'crash', 'nbretry', 'mail', 'addr', 'ssl', 'login', 'pwd', 'passif', 'destfolder', 'sendermail', 'textMailSender', 'textMailReceiver', 'usrId', 'foldertocreate', 'logfile', 'created', 'updated', 'elements');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}