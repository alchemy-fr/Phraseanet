<?php

namespace Alchemy\Phrasea\Model\Proxies\__CG__\Alchemy\Phrasea\Model\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Task extends \Alchemy\Phrasea\Model\Entities\Task implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'id', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'name', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'jobId', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'settings', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'completed', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'status', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'crashed', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'singleRun', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'created', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'updated', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'lastExecution', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'period'];
        }

        return ['__isInitialized__', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'id', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'name', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'jobId', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'settings', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'completed', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'status', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'crashed', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'singleRun', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'created', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'updated', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'lastExecution', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\Task' . "\0" . 'period'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Task $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setJobId($jobId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJobId', [$jobId]);

        return parent::setJobId($jobId);
    }

    /**
     * {@inheritDoc}
     */
    public function getJobId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJobId', []);

        return parent::getJobId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSettings($settings)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSettings', [$settings]);

        return parent::setSettings($settings);
    }

    /**
     * {@inheritDoc}
     */
    public function getSettings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSettings', []);

        return parent::getSettings();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompleted($completed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompleted', [$completed]);

        return parent::setCompleted($completed);
    }

    /**
     * {@inheritDoc}
     */
    public function isCompleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCompleted', []);

        return parent::isCompleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setCrashed($crashed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCrashed', [$crashed]);

        return parent::setCrashed($crashed);
    }

    /**
     * {@inheritDoc}
     */
    public function getCrashed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCrashed', []);

        return parent::getCrashed();
    }

    /**
     * {@inheritDoc}
     */
    public function setSingleRun($singleRun)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSingleRun', [$singleRun]);

        return parent::setSingleRun($singleRun);
    }

    /**
     * {@inheritDoc}
     */
    public function isSingleRun()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSingleRun', []);

        return parent::isSingleRun();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated($updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setExecuted($lastExecution)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExecuted', [$lastExecution]);

        return parent::setExecuted($lastExecution);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastExecution()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastExecution', []);

        return parent::getLastExecution();
    }

    /**
     * {@inheritDoc}
     */
    public function getPeriod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeriod', []);

        return parent::getPeriod();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeriod($period)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeriod', [$period]);

        return parent::setPeriod($period);
    }

}
