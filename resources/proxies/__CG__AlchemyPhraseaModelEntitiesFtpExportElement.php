<?php

namespace Alchemy\Phrasea\Model\Proxies\__CG__\Alchemy\Phrasea\Model\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class FtpExportElement extends \Alchemy\Phrasea\Model\Entities\FtpExportElement implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'id', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'recordId', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'baseId', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'subdef', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'filename', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'folder', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'error', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'done', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'export', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'businessfields', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'created', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'updated'];
        }

        return ['__isInitialized__', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'id', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'recordId', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'baseId', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'subdef', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'filename', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'folder', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'error', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'done', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'export', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'businessfields', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'created', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\FtpExportElement' . "\0" . 'updated'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (FtpExportElement $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecordId($recordId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecordId', [$recordId]);

        return parent::setRecordId($recordId);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecordId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecordId', []);

        return parent::getRecordId();
    }

    /**
     * {@inheritDoc}
     */
    public function setBaseId($baseId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBaseId', [$baseId]);

        return parent::setBaseId($baseId);
    }

    /**
     * {@inheritDoc}
     */
    public function getBaseId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBaseId', []);

        return parent::getBaseId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubdef($subdef)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubdef', [$subdef]);

        return parent::setSubdef($subdef);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubdef()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubdef', []);

        return parent::getSubdef();
    }

    /**
     * {@inheritDoc}
     */
    public function setFilename($filename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFilename', [$filename]);

        return parent::setFilename($filename);
    }

    /**
     * {@inheritDoc}
     */
    public function getFilename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFilename', []);

        return parent::getFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function setFolder($folder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFolder', [$folder]);

        return parent::setFolder($folder);
    }

    /**
     * {@inheritDoc}
     */
    public function getFolder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFolder', []);

        return parent::getFolder();
    }

    /**
     * {@inheritDoc}
     */
    public function setError($error)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setError', [$error]);

        return parent::setError($error);
    }

    /**
     * {@inheritDoc}
     */
    public function isError()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isError', []);

        return parent::isError();
    }

    /**
     * {@inheritDoc}
     */
    public function setDone($done)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDone', [$done]);

        return parent::setDone($done);
    }

    /**
     * {@inheritDoc}
     */
    public function isDone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDone', []);

        return parent::isDone();
    }

    /**
     * {@inheritDoc}
     */
    public function setBusinessfields($businessfields)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBusinessfields', [$businessfields]);

        return parent::setBusinessfields($businessfields);
    }

    /**
     * {@inheritDoc}
     */
    public function isBusinessfields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBusinessfields', []);

        return parent::isBusinessfields();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(\DateTime $created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated(\DateTime $updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setExport(\Alchemy\Phrasea\Model\Entities\FtpExport $export = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExport', [$export]);

        return parent::setExport($export);
    }

    /**
     * {@inheritDoc}
     */
    public function getExport()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExport', []);

        return parent::getExport();
    }

}
