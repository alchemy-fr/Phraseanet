<?php

namespace Alchemy\Phrasea\Model\Proxies\__CG__\Alchemy\Phrasea\Model\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class LazaretFile extends \Alchemy\Phrasea\Model\Entities\LazaretFile implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'id', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'filename', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'thumbFilename', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'originalName', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'base_id', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'uuid', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'sha256', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'forced', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'created', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'updated', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'attributes', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'checks', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'session'];
        }

        return ['__isInitialized__', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'id', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'filename', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'thumbFilename', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'originalName', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'base_id', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'uuid', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'sha256', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'forced', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'created', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'updated', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'attributes', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'checks', '' . "\0" . 'Alchemy\\Phrasea\\Model\\Entities\\LazaretFile' . "\0" . 'session'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (LazaretFile $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setFilename($filename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFilename', [$filename]);

        return parent::setFilename($filename);
    }

    /**
     * {@inheritDoc}
     */
    public function getFilename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFilename', []);

        return parent::getFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function setThumbFilename($thumbFilename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setThumbFilename', [$thumbFilename]);

        return parent::setThumbFilename($thumbFilename);
    }

    /**
     * {@inheritDoc}
     */
    public function getThumbFilename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getThumbFilename', []);

        return parent::getThumbFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function setOriginalName($originalName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOriginalName', [$originalName]);

        return parent::setOriginalName($originalName);
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginalName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginalName', []);

        return parent::getOriginalName();
    }

    /**
     * {@inheritDoc}
     */
    public function setBaseId($baseId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBaseId', [$baseId]);

        return parent::setBaseId($baseId);
    }

    /**
     * {@inheritDoc}
     */
    public function getBaseId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBaseId', []);

        return parent::getBaseId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCollection(\Alchemy\Phrasea\Application $app)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCollection', [$app]);

        return parent::getCollection($app);
    }

    /**
     * {@inheritDoc}
     */
    public function setUuid($uuid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUuid', [$uuid]);

        return parent::setUuid($uuid);
    }

    /**
     * {@inheritDoc}
     */
    public function getUuid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUuid', []);

        return parent::getUuid();
    }

    /**
     * {@inheritDoc}
     */
    public function setSha256($sha256)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSha256', [$sha256]);

        return parent::setSha256($sha256);
    }

    /**
     * {@inheritDoc}
     */
    public function getSha256()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSha256', []);

        return parent::getSha256();
    }

    /**
     * {@inheritDoc}
     */
    public function setForced($forced)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setForced', [$forced]);

        return parent::setForced($forced);
    }

    /**
     * {@inheritDoc}
     */
    public function getForced()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForced', []);

        return parent::getForced();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(\DateTime $created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated(\DateTime $updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function addAttribute(\Alchemy\Phrasea\Model\Entities\LazaretAttribute $attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAttribute', [$attributes]);

        return parent::addAttribute($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAttribute(\Alchemy\Phrasea\Model\Entities\LazaretAttribute $attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAttribute', [$attributes]);

        return parent::removeAttribute($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', []);

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function addCheck(\Alchemy\Phrasea\Model\Entities\LazaretCheck $checks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCheck', [$checks]);

        return parent::addCheck($checks);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCheck(\Alchemy\Phrasea\Model\Entities\LazaretCheck $checks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCheck', [$checks]);

        return parent::removeCheck($checks);
    }

    /**
     * {@inheritDoc}
     */
    public function getCheckerName(\Alchemy\Phrasea\Model\Entities\LazaretCheck $checks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCheckerName', [$checks]);

        return parent::getCheckerName($checks);
    }

    /**
     * {@inheritDoc}
     */
    public function getChecks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChecks', []);

        return parent::getChecks();
    }

    /**
     * {@inheritDoc}
     */
    public function getChecksWhithNameKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChecksWhithNameKey', []);

        return parent::getChecksWhithNameKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setSession(\Alchemy\Phrasea\Model\Entities\LazaretSession $session = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSession', [$session]);

        return parent::setSession($session);
    }

    /**
     * {@inheritDoc}
     */
    public function getSession()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSession', []);

        return parent::getSession();
    }

    /**
     * {@inheritDoc}
     */
    public function getRecordsToSubstitute(\Alchemy\Phrasea\Application $app, $includeReason = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecordsToSubstitute', [$app, $includeReason]);

        return parent::getRecordsToSubstitute($app, $includeReason);
    }

}
