
### Phraseanet stack composition
#
# For stack composition use COMPOSE_PROFILES and COMPOSE_FILES
# Use it to adapt the stack in accordance with your needs.
# 
# docker-compose files description
# - docker-compose.yml :  services Nginx, Phraseanet, workers, scheduler 
# - docker-compose.datastores.yml : all data storage services required by Phraseanet except for files storage.
# - docker-compose.tools.yml : dev and debug tools   
# - docker-compose.override.yml : for dev only, use the code from hosts, activate ide debugger, ports mapping for datastores
#
## Profiles list
#
# 
# - app : launch Phraseanet and nginx containers
# - workers : launch one worker container by kind of Jobs, you can also choose to launch only some workers, see worker section below.
# - worker : launch one container worker with all jobs run on it.
# - db : launch a mariadb container, because this is the primary datastore for production usage, use your own service.
# - elastisearch : launch a elasticsearch container.
# - rabbitmq : launch a rabbitmq container.
# - redis : launch a redis container
# - builder : launch the builder container, for dev only
# - elk : launch an elk stack, for dev only
# - squid : reverse proxy for dev only
# - mailhog : for catching all email emit by app for dev   
#
# worker  (docker-compose profiles names) : 
# - assetsInjest
# - createRecord
# - deleteRecord
# - editRecord
# - exportMail
# - exposeUpload
# - exportFtp
# - mainQueue
# - populateIndex
# - pullAssets
# - recordsActions
# - subdefCreation
# - subtitle
# - validationReminder
# - webhook
# - writeMetadatas
#  
# Scheduler (legacy task manager)
# use only if your stack require using old task
# - scheduler 

### Example of stack composition
#
# For dev
# COMPOSE_FILE=docker-compose.yml:docker-compose.datastores.yml:docker-compose.tools.yml:docker-compose.override.yml
# COMPOSE_PROFILES=app,db,pma,elasticsearch,redis,rabbitmq,workers,mailhog,builder

# For test with debug
# COMPOSE_FILE=docker-compose.yml:docker-compose.datastores.yml:docker-compose.tools.yml
# COMPOSE_PROFILES=app,db,pma,elasticsearch,rabbitmq,redis,worker,workers,mailhog

# For prod, require using your own database service 
# COMPOSE_FILE=docker-compose.yml:docker-compose.datastores.yml:docker-compose.tools.yml:docker-compose.scheduler.yml
# COMPOSE_PROFILES=app,workers

# example with all profiles 
# COMPOSE_FILE=docker-compose.yml:docker-compose.datastores.yml:docker-compose.tools.yml
# COMPOSE_PROFILES=app,db,elasticsearch,redis,rabbitmq,pma,mailhog,assetsInjest,createRecord,deleteRecord,editRecord,exportMail,exposeUpload,exportFtp,mainQueue, populateIndex,pullAssets,recordsActions,subdefCreation,subtitle,validationReminder,webhook,writeMetadatas,scheduler,elk

# Default configuration
#
COMPOSE_FILE=docker-compose.yml:docker-compose.datastores.yml:docker-compose.tools.yml
COMPOSE_PROFILES=app,db,elasticsearch,rabbitmq,redis,worker,mailhog


### Phraseanet container
# Registry from where you pull Docker images
# - For build and use your images : local
# - For using predbuild images from Alchemy registry : alchemyfr 
# @run 
PHRASEANET_DOCKER_REGISTRY=local

# Tag of the Docker images
# @run 
PHRASEANET_DOCKER_TAG=4.1.3

# APPLICATION PORT
# @run 
PHRASEANET_APP_PORT=8082

### Phraseanet fisrt launch and setup 
# Phraseanet entrypoint do installation, setup and play upgrade, just essential parameters are defined by this.  

# Phraseanet entrypoint do an installation if it not installed (0/1)
# @run 
PHRASEANET_INSTALL=1

# Phraseanet entrypoint apply they env variables values to config/configuration.yml file (0/1) 
# @run 
PHRASEANET_SETUP=1

# Phraseanet entrypoint play an upgrade (0/1) 
# @run 
PHRASEANET_UPGRADE=0



# --------------- RabbitMQ SETTING ----------------------


RABBITMQ_DEFAULT_USER=alchemy
RABBITMQ_DEFAULT_PASS=vdh4dpe5Wy3R
RABBITMQ_MANAGEMENT_PORT=10811



# --------------- GATEWAY SETTING (nginx) -----------------------
# @run
GATEWAY_SEND_TIMEOUT=120
# @run
GATEWAY_PROXY_TIMEOUT=120
# @run
GATEWAY_FASTCGI_TIMEOUT=300

# --------------- PHP CONFIGURATION  --------------------

# Max upload size
# @run
MAX_BODY_SIZE=1G

# Max input var
# @run
MAX_INPUT_VARS=12000
# @run
MAX_EXECUTION_TIME=120
# @run
MAX_INPUT_TIME=60
# @run
REQUEST_TERMINATE_TIMEOUT=300s

# Enable opcache ? (0/1)
# @run
OPCACHE_ENABLED=1
# session cache limiter (off/on)
# @run
SESSION_CACHE_LIMITER=off
# @run
# PHP LOG LEVEL : Possible Values: alert, error, warning, notice, debug
PHP_LOG_LEVEL=warning

# --------------- MYSQL CONFIGURATION  --------------------

# Mysql configuration
# @build
MYSQL_ROOT_PASSWORD=root
SERVER_NAME=phraseanet-docker

# Mysql max allowed packet
# @run
MYSQL_MAX_ALLOWED_PACKET=16M

# @run
MYSQL_MAX_CONNECTION=100

# Enable the slow query log to see queries with especially long duration
# @run
MYSQL_SLOW_QUERY_LOG=0
# @run
MYSQL_LONG_QUERY_TIME=10

# Cache only tiny result sets, so we can fit more in the query cache.
# @run
MYSQL_QUERY_CACHE_LIMIT=128k
# @run
MYSQL_QUERY_CACHE_SIZE=64M
# @run
MYSQL_KEY_BUFFER_SIZE=128M

# --------------- PHRASEANET CONFIGURATION -----------------

# These variables are used in the configuration.yml .

# use PHRASEANET_PROJECT_NAME env for setting Application title display on Phraseanet home page (0 keep value define configuration.yml / 1 use PHRASEANET_PROJECT_NAME)
# @run
ENV_SET_PHRASEANET_PROJET_NAME=1
# @run
PHRASEANET_PROJECT_NAME=Phraseanet
# @run
PHRASEANET_SERVER_NAME=localhost

# set here the first user / email couple
#set to id of Phraseanet root account, if you want activate a sync for Phraseanet root account password provide by PHRASEANET_ADMIN_ACCOUNT_PASSWORD env value.
# @run 
PHRASEANET_ADMIN_ACCOUNT_ID= 

# @run
PHRASEANET_ADMIN_ACCOUNT_EMAIL=admin@alchemy.fr

# @run
PHRASEANET_ADMIN_ACCOUNT_PASSWORD=iJRqXU0MwbyJewQLBbra6IWHsWly

# Mysql parameters
# @run but use only during Phraseanet installation 
PHRASEANET_DB_HOST=db
PHRASEANET_DB_PORT=3306
PHRASEANET_DB_USER=root
PHRASEANET_DB_PASSWORD=root

# Phraseanet db Installation parameters
# @run but use only during Phraseanet installation 
INSTALL_DB_TEMPLATE=DublinCore
INSTALL_APPBOX=ab_master
INSTALL_DATABOX=db_databox1

# language : comma separated list of language code and the default language
# @run 
PHRASEANET_AVAILABLE_LANGUAGE=fr,en,de,du
PHRASEANET_DEFAULT_LANGUAGE=en

# binaries execution timeouts
# @run
PHRASEANET_FFMPEG_TIMEOUT=7200
PHRASEANET_FFPROBE_TIMEOUT=120
PHRASEANET_GS_TIMEOUT=120
PHRASEANET_MP4BOX_TIMEOUT=120
PHRASEANET_SWFTOOLS_TIMEOUT=120
PHRASEANET_UNOCON_TIMEOUT=120
PHRASEANET_EXIFTOOL_TIMEOUT=120

# RabbitMQ parameters
# @run
PHRASEANET_RABBITMQ_HOST=rabbitmq
PHRASEANET_RABBITMQ_PORT=5672
PHRASEANET_RABBITMQ_SSL=false
PHRASEANET_RABBITMQ_VHOST=/
PHRASEANET_RABBITMQ_HEARTBEAT=30


# network : comma separated list of IP ou SUBNETS
# @run
PHRASEANET_TRUSTED_PROXIES=
PHRASEANET_DEBUG_ALLOWED_IP=
PHRASEANET_SUBNET_IPS=172.32.0.0/16

# Phraseanet api setting
# @run
PHRASEANET_API_ENABLED=true
PHRASEANET_API_SSL=true
PHRASEANET_API_AUTH_TOKEN_HEADER_ONLY=false

# Mapbox setting Geolocalisation
# @run
PHRASEANET_MAPBOX_ACTIVATE=false
PHRASEANET_MAPBOX_TOKEN=
PHRASEANET_MAPBOX_KIND=

# Phraseanet mail configuration
# @run
PHRASEANET_EMITTER_EMAIL=phraseanet@example.com
PHRASEANET_MAIL_OBJECT_PREFIX="phraseanet"

# If set to true the SMTP parameters are set from .env file / to false SMTP parameters should be set in GUI
# @run
PHRASEANET_SMTP_ENABLED=true
PHRASEANET_SMTP_HOST=mailhog
PHRASEANET_SMTP_PORT=1025
PHRASEANET_SMTP_AUTH_ENABLED=false
PHRASEANET_SMTP_SECURE_MODE=null
PHRASEANET_SMTP_USER=
PHRASEANET_SMTP_PASSWORD=

# Phraseanet Workers and Scheduler setting 

# PHRASEANET_EXPLODE_WORKER define how many process are launched in the "worker" container
# "0" only one process is launched inside the container with no specializing,
# in this case the scaling needs to be made by the orchestation eg K8S. this is the recommended way. 
# "1" deploys one phraseanet worker for each kind of job, the parallelime is defined by value of envs started by PHRASEANET_WORKER_ 
# eg : PHRASEANET_WORKER_subdefCreation=2, for two subdefinitions builded at the same time.
# 
# PHRASEANET_WORKERS_LAUNCH_METHOD  define when PHRASEANET_EXPLODE_WORKER=1, the method for launching Phraseanet workers process.
# PHRASEANET_WORKERS_LAUNCH_METHOD="supervisor" : for launch it with supervisor.
# PHRASEANET_WORKERS_LAUNCH_METHOD=  : for launch phraseanet workers with a "bin/console"

# Old Phraseanet task planner AKA "Phraseanet scheduler" 
# To launch the "scheduler" container, add "scheduler" profile to env COMPOSE_PROFILES
# Launch this container only if you need to use the old Phraseanet tasks.

# @run
PHRASEANET_EXPLODE_WORKER=1
PHRASEANET_WORKERS_LAUNCH_METHOD=
# @run
PHRASEANET_WORKER_assetsIngest=1
PHRASEANET_WORKER_createRecord=2
PHRASEANET_WORKER_deleteRecord=2
PHRASEANET_WORKER_editRecord=2
PHRASEANET_WORKER_exportMail=2
PHRASEANET_WORKER_exposeUpload=2
PHRASEANET_WORKER_ftp=1
PHRASEANET_WORKER_mainQueue=3
PHRASEANET_WORKER_populateIndex=1
PHRASEANET_WORKER_pullAssets=1
PHRASEANET_WORKER_recordsActions=1
PHRASEANET_WORKER_subdefCreation=1
PHRASEANET_WORKER_subtitle=1
PHRASEANET_WORKER_validationReminder=1
PHRASEANET_WORKER_webhook=1
PHRASEANET_WORKER_writeMetadatas=1



# Locale setting
# @run
LC_MESSAGES=C.UTF-8
LC_COLLATE=C.UTF-8
LC_IDENTIFICATION=C.UTF-8
LANG=C.UTF-8
LC_MEASUREMENT=C.UTF-8
LC_CTYPE=C.UTF-8
LC_TIME=C.UTF-8
LC_NAME=C.UTF-8

# Volumes location 
# @run
PHRASEANET_CONFIG_DIR=./config
PHRASEANET_LOGS_DIR=./logs
PHRASEANET_DATA_DIR=./datas
PHRASEANET_DB_DIR=./volumes/db
PHRASEANET_ELASTICSEARCH_DIR=./volumes/elasticsearch
PHRASEANET_THUMBNAILS_DIR=./www/thumbnails
PHRASEANET_CUSTOM_DIR=./www/custom
PHRASEANET_PLUGINS_DIR=./www/plugins
PHRASEANET_TMP_DIR=./tmp
PHRASEANET_CACHE_DIR=./cache
PHRASEANET_DOWNLOAD_DIR=./datas/download
PHRASEANET_LAZARET_DIR=./datas/lazaret
PHRASEANET_CAPTION_DIR=./tmp/caption
PHRASEANET_WORKER_TMP=./tmp/worker

# Plugin support
# @build
PHRASEANET_PLUGINS=
PHRASEANET_SSH_PRIVATE_KEY=

# --------------- EXTERNAL BINARIES SETTING -----------------

# ImageMagick default policy override
# @run
IMAGEMAGICK_POLICY_VERSION=6
IMAGEMAGICK_POLICY_WIDTH=16KP
IMAGEMAGICK_POLICY_HEIGHT=16KP
IMAGEMAGICK_POLICY_MAP=512MiB
IMAGEMAGICK_POLICY_MEMORY=256MiB
IMAGEMAGICK_POLICY_AREA=128MB
IMAGEMAGICK_POLICY_DISK=1GiB
IMAGEMAGICK_POLICY_TEMPORARY_PATH=/tmp

# --------------- DEV purpose -------------------------------

# Define the PhpMyAdmin port
# @run
PHRASEANET_PHPMYADMIN_PORT=8089


# define mailhoog web GUI port mapping
# @run
MAILHOG_GUI_PORT=8025


# Xdebug
# @run
XDEBUG_ENABLED=0
XDEBUG_PROFILER_ENABLED=0
IDE_KEY=PHPSTORM
XDEBUG_REMOTE_HOST=172.32.0.1
PHP_IDE_CONFIG=serverName=docker-server-phraseanet

# -------------- NEWRELIC MONITORING ------------------------
# Activate or not the Newrelic agent for plateforme monitoring
# @run
NEWRELIC_ENABLED=false
NEWRELIC_LICENSE_KEY=
NEWRELIC_APP_NAME=

# -------------- BLACKFIRE ---------------------------------
# For developpement Activate, or not the Blackfire agent for plateforme monitoring
# @run
BLACKFIRE_ENABLED=false
BLACKFIRE_SERVER_ID=
BLACKFIRE_SERVER_TOKEN=


# For dev or testing  export ftp-server
# @run
PHRASEANET_FTP_DIR=./datas/ftp

# for dev proxy squid WIP 
# PHRASEANET_SQUID_DIR=./volumes/squid
# PHRASEANET_SQUID_CONF= ./docker/squid/squid.conf
# PHRASEANET_SQUID_PORT=3128


# For dev who don't have SSH_AUTH_SOCK (avoid an empty volume name)
SSH_AUTH_SOCK=/dev/null
